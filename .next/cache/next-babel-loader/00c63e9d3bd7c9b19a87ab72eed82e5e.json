{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nconst AuthContext = createContext();\nconst {\n  Provider\n} = AuthContext;\n\nconst AuthProvider = ({\n  children\n}) => {\n  const {\n    0: authState,\n    1: setAuthState\n  } = useState({});\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userInfo = localStorage.getItem('userInfo');\n    const expiresAt = localStorage.getItem('expiresAt');\n    const message = localStorage.getItem('message');\n    setAuthState({\n      token,\n      expiresAt,\n      userInfo: userInfo ? JSON.parse(userInfo) : {},\n      message\n    });\n  }, []);\n\n  const setAuthInfo = ({\n    token,\n    userInfo,\n    expiresAt,\n    message\n  }) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('userInfo', _JSON$stringify(userInfo));\n    localStorage.setItem('expiresAt', expiresAt);\n    localStorage.setItem('message', message);\n    setAuthState({\n      token,\n      userInfo,\n      expiresAt,\n      message\n    });\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('expiresAt');\n    localStorage.removeItem('message');\n    setAuthState({});\n  };\n\n  const isAuthenticated = () => {\n    if (!authState.token || !authState.expiresAt || authState.message === \"not verified\") {\n      return false;\n    }\n\n    return new Date().getTime() / 1000 < authState.expiresAt;\n  };\n\n  const isAdmin = () => {\n    return authState.userInfo && authState.userInfo.role === 'admin';\n  };\n\n  return __jsx(Provider, {\n    value: {\n      authState,\n      setAuthState: authInfo => setAuthInfo(authInfo),\n      logout,\n      isAuthenticated,\n      isAdmin\n    }\n  }, children);\n};\n\nexport { AuthContext, AuthProvider };","map":null,"metadata":{},"sourceType":"module"}