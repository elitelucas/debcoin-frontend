{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nvar AuthContext = createContext();\nvar Provider = AuthContext.Provider;\n\nvar AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({}),\n      authState = _useState[0],\n      setAuthState = _useState[1];\n\n  useEffect(function () {\n    var token = localStorage.getItem('token');\n    var userInfo = localStorage.getItem('userInfo');\n    var expiresAt = localStorage.getItem('expiresAt');\n    var message = localStorage.getItem('message');\n    setAuthState({\n      token: token,\n      expiresAt: expiresAt,\n      userInfo: userInfo ? JSON.parse(userInfo) : {},\n      message: message\n    });\n  }, []);\n\n  var setAuthInfo = function setAuthInfo(_ref2) {\n    var token = _ref2.token,\n        userInfo = _ref2.userInfo,\n        expiresAt = _ref2.expiresAt,\n        message = _ref2.message;\n    localStorage.setItem('token', token);\n    localStorage.setItem('userInfo', _JSON$stringify(userInfo));\n    localStorage.setItem('expiresAt', expiresAt);\n    localStorage.setItem('message', message);\n    setAuthState({\n      token: token,\n      userInfo: userInfo,\n      expiresAt: expiresAt,\n      message: message\n    });\n  };\n\n  var logout = function logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('expiresAt');\n    localStorage.removeItem('message');\n    setAuthState({});\n  };\n\n  var isAuthenticated = function isAuthenticated() {\n    if (!authState.token || !authState.expiresAt || authState.message === \"not verified\") {\n      return false;\n    }\n\n    return new Date().getTime() / 1000 < authState.expiresAt;\n  };\n\n  var isAdmin = function isAdmin() {\n    return authState.userInfo && authState.userInfo.role === 'admin';\n  };\n\n  return __jsx(Provider, {\n    value: {\n      authState: authState,\n      setAuthState: function setAuthState(authInfo) {\n        return setAuthInfo(authInfo);\n      },\n      logout: logout,\n      isAuthenticated: isAuthenticated,\n      isAdmin: isAdmin\n    }\n  }, children);\n};\n\nexport { AuthContext, AuthProvider };","map":null,"metadata":{},"sourceType":"module"}